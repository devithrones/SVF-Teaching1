digraph "ICFG" {
	label="ICFG";

	Node0x10140bf10 [shape=record,color=black,label="{NodeID: 27\nIntraBlockNode ID: 27   br label %while.cond \{fun: main\}}"];
	Node0x10140bf10 -> Node0x10140acb0[style=solid];
	Node0x10140bd90 [shape=record,color=black,label="{NodeID: 26\nIntraBlockNode ID: 26   store i32 %inc, i32* %a, align 4 \{fun: main\}}"];
	Node0x10140bd90 -> Node0x10140bf10[style=solid];
	Node0x10140bb50 [shape=record,color=black,label="{NodeID: 25\nIntraBlockNode ID: 25   %inc = add nsw i32 %1, 1 \{fun: main\}}"];
	Node0x10140bb50 -> Node0x10140bd90[style=solid];
	Node0x10140a450 [shape=record,color=green,label="{NodeID: 24\nFunExitBlockNode ID: 24 Exit(\{  \})\n \{fun: main\}}"];
	Node0x10140b6e0 [shape=record,color=black,label="{NodeID: 23\nIntraBlockNode ID: 23   %1 = load i32, i32* %a, align 4 \{fun: main\}}"];
	Node0x10140b6e0 -> Node0x10140bb50[style=solid];
	Node0x10140b560 [shape=record,color=black,label="{NodeID: 22\nIntraBlockNode ID: 22   ret i32 0 \{fun: main\}}"];
	Node0x10140b560 -> Node0x10140a450[style=solid];
	Node0x10140b360 [shape=record,color=blue,label="{NodeID: 21\nRetBlockNode ID: 21   call void @source(i32* %a) \{fun: main\}}"];
	Node0x10140b360 -> Node0x10140b6e0[style=solid];
	Node0x10140b220 [shape=record,color=red,label="{NodeID: 20\nCallBlockNode ID: 20   call void @source(i32* %a) \{fun: main\}|{|<s1>0x101308ce0}}"];
	Node0x10140b220 -> Node0x10140b360[style=solid];
	Node0x10140b220:s1 -> Node0x101409760[style=solid,color=red];
	Node0x10140afe0 [shape=record,color=black,label="{NodeID: 19\nIntraBlockNode ID: 19   br i1 %cmp, label %while.body, label %while.end \{fun: main\}}"];
	Node0x10140afe0 -> Node0x10140b220[style=solid];
	Node0x10140afe0 -> Node0x10140b560[style=solid];
	Node0x10140ae90 [shape=record,color=black,label="{NodeID: 18\nIntraBlockNode ID: 18   %cmp = icmp sle i32 %0, 1 \{fun: main\}}"];
	Node0x10140ae90 -> Node0x10140afe0[style=solid];
	Node0x10140acb0 [shape=record,color=black,label="{NodeID: 17\nIntraBlockNode ID: 17   %0 = load i32, i32* %a, align 4 \{fun: main\}}"];
	Node0x10140acb0 -> Node0x10140ae90[style=solid];
	Node0x10140ab30 [shape=record,color=black,label="{NodeID: 16\nIntraBlockNode ID: 16   br label %while.cond \{fun: main\}}"];
	Node0x10140ab30 -> Node0x10140acb0[style=solid];
	Node0x10140a9b0 [shape=record,color=black,label="{NodeID: 15\nIntraBlockNode ID: 15   store i32 1, i32* %a, align 4 \{fun: main\}}"];
	Node0x10140a9b0 -> Node0x10140ab30[style=solid];
	Node0x10140a800 [shape=record,color=black,label="{NodeID: 14\nIntraBlockNode ID: 14   store i32 0, i32* %retval, align 4 \{fun: main\}}"];
	Node0x10140a800 -> Node0x10140a9b0[style=solid];
	Node0x10140a650 [shape=record,color=black,label="{NodeID: 13\nIntraBlockNode ID: 13   %a = alloca i32, align 4 \{fun: main\}AddrPE: [22\<--23]    %a = alloca i32, align 4\{  \}}"];
	Node0x10140a650 -> Node0x10140a800[style=solid];
	Node0x10140a540 [shape=record,color=black,label="{NodeID: 12\nIntraBlockNode ID: 12   %retval = alloca i32, align 4 \{fun: main\}AddrPE: [20\<--21]    %retval = alloca i32, align 4\{  \}}"];
	Node0x10140a540 -> Node0x10140a650[style=solid];
	Node0x10140a3b0 [shape=record,color=yellow,label="{NodeID: 11\nFunEntryBlockNode ID: 11 Entry(\{  \})\n \{fun: main\}}"];
	Node0x10140a3b0 -> Node0x101307280[style=solid];
	Node0x10140a3b0 -> Node0x10140a540[style=solid];
	Node0x10140a200 [shape=record,color=black,label="{NodeID: 10\nIntraBlockNode ID: 10   ret void \{fun: sink\}}"];
	Node0x10140a200 -> Node0x101409d20[style=solid];
	Node0x10140a0e0 [shape=record,color=green,label="{NodeID: 9\nFunExitBlockNode ID: 9 Exit(\{  \})\n \{fun: source\}|{<s0>0x101308ce0}}"];
	Node0x10140a0e0:s0 -> Node0x10140b360[style=solid,color=blue];
	Node0x101409f00 [shape=record,color=black,label="{NodeID: 8\nIntraBlockNode ID: 8   ret void \{fun: source\}}"];
	Node0x101409f00 -> Node0x10140a0e0[style=solid];
	Node0x101409d20 [shape=record,color=green,label="{NodeID: 7\nFunExitBlockNode ID: 7 Exit(\{  \})\n \{fun: sink\}|{<s0>0x101308298}}"];
	Node0x101409d20:s0 -> Node0x101409c80[style=solid,color=blue];
	Node0x101409c80 [shape=record,color=blue,label="{NodeID: 6\nRetBlockNode ID: 6   call void @sink() \{fun: source\}}"];
	Node0x101409c80 -> Node0x101409f00[style=solid];
	Node0x101409b20 [shape=record,color=yellow,label="{NodeID: 5\nFunEntryBlockNode ID: 5 Entry(\{  \})\n \{fun: sink\}}"];
	Node0x101409b20 -> Node0x10140a200[style=solid];
	Node0x101409a70 [shape=record,color=red,label="{NodeID: 4\nCallBlockNode ID: 4   call void @sink() \{fun: source\}|{|<s1>0x101308298}}"];
	Node0x101409a70 -> Node0x101409c80[style=solid];
	Node0x101409a70:s1 -> Node0x101409b20[style=solid,color=red];
	Node0x101409950 [shape=record,color=black,label="{NodeID: 3\nIntraBlockNode ID: 3   store i32* %s, i32** %s.addr, align 8 \{fun: source\}StorePE: [8\<--7]    store i32* %s, i32** %s.addr, align 8\{  \}}"];
	Node0x101409950 -> Node0x101409a70[style=solid];
	Node0x101409800 [shape=record,color=black,label="{NodeID: 2\nIntraBlockNode ID: 2   %s.addr = alloca i32*, align 8 \{fun: source\}AddrPE: [8\<--9]    %s.addr = alloca i32*, align 8\{  \}}"];
	Node0x101409800 -> Node0x101409950[style=solid];
	Node0x101409760 [shape=record,color=yellow,label="{NodeID: 1\nFunEntryBlockNode ID: 1 Entry(\{  \})\n \{fun: source\}}"];
	Node0x101409760 -> Node0x101409800[style=solid];
	Node0x101307280 [shape=record,color=purple,label="{NodeID: 0\nCopyPE: [2\<--3]  i8* null\{ Can only get source location for instruction, argument, global var or function. \}AddrPE: [4\<--5]  ; Function Attrs: noinline nounwind optnone ssp uwtable\ndefine void @source(i32* %s) #0 \{\nentry:\n  %s.addr = alloca i32*, align 8\n  store i32* %s, i32** %s.addr, align 8\n  call void @sink()\n  ret void\n\}\n\{  \}AddrPE: [12\<--13]  ; Function Attrs: noinline nounwind optnone ssp uwtable\ndefine void @sink() #0 \{\nentry:\n  ret void\n\}\n\{  \}AddrPE: [17\<--18]  ; Function Attrs: noinline nounwind optnone ssp uwtable\ndefine i32 @main() #0 \{\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 1, i32* %a, align 4\n  br label %while.cond\n\nwhile.cond:                                       ; preds = %while.body, %entry\n  %0 = load i32, i32* %a, align 4\n  %cmp = icmp sle i32 %0, 1\n  br i1 %cmp, label %while.body, label %while.end\n\nwhile.body:                                       ; preds = %while.cond\n  call void @source(i32* %a)\n  %1 = load i32, i32* %a, align 4\n  %inc = add nsw i32 %1, 1\n  store i32 %inc, i32* %a, align 4\n  br label %while.cond\n\nwhile.end:                                        ; preds = %while.cond\n  ret i32 0\n\}\n\{  \}}"];
}
